'use strict'

// let a = 5;
// let b = 10;
// let c = 15;

// const add = function (a, b, c) {
//     return a + b + c;
// }

// console.log(add(10, 15, 25));
// console.log(add(15, 33, 45));
// console.log(add(4, 5, 6));

// const name = function(name = "Aleks", lastName = "Iamsh", day = ) {
//     console.log(`my name is ${name} my last name ${lastName} ${day}`);
// }
// name("Alex", "Iamsh", 2)

// name(12, 6);
// console.log(name(12, 6));
// age();

// function name(a, b) {
//     return a + b;
// }

// function age() {
//     console.log('age');
// }

// function declaration

// function name(a, b) {
//     console.log(a + b)
// }
// let newName = name(27, 12);

// function result (a, b) {
//     console.log(a);
//     return a + b
// }

// const newResult = result(newName,  10);
// console.log(newResult);
    
// function expresion
// const add = function(a, b, c) {
//     return a + b + c;
// }

// const showTestDays = function(name = "Пользователь", days = 30) {
//     return `Имя - ${name}, использовано ${days} тестовых дня(ей)`;
//   }
  
//   console.log( showTestDays("Екатерина", 10) );
//   // "Имя - Екатерина, использовано 10 тестовых дня(ей)"
  
//   console.log( showTestDays("Михаил") );
//   // "Имя - Михаил, использовано 30 тестовых дня(ей)"
  
//   console.log( showTestDays() );
//   // "Имя - Пользователь, использовано 30 тестовых дня(ей)"

// function fn(b) {
//     return b % 2 === 0;
// }

// function fn2(b) {
//     if(fn(b)) {
//         alert('Ok!')
//     } else {
//     alert('No!')
//     }
// }

// fn2(3);

// ----------------------------------------------------------------------
//=============================== task 01 =======================
// Заполните массив 10-ю иксами с помощью цикла.
// let mass1 = [];
// for (var i = 0; i < 10; i++) {
//     mass1[i] = 'x';
// }
// console.log(mass1);
//=============================== task 02 =======================
// Заполните массив числами от 1 до 10 с помощью цикла.
// let mass2 = [];
// for (let i = 1; i <= 10; i++) {
// 	mass2.push(i);
// }
// console.log(mass2);
//=============================== task 03 =======================
// Дана строка, например, '123456'. Сделайте из нее '214365'.
// let str = '123456';
// let mass3 = str.split('');
// for (let i = 0; i < mass3.length; i++) {
//     if (i % 2 !== 0) {
//         let a = mass3[i - 1];
//         mass3[i - 1] = mass3[i];
//         //console.log(mass3);
//         mass3[i] = a;
//     }
// }
// console.log(mass3);

//=============================== task 04 =======================
//Сделайте функцию isNumberInRange, которая параметром принимает число и проверяет, что оно больше нуля и меньше 10. 
//Если это так - пусть функция возвращает true, если не так - false.
// function isNumberInRange(num) {
//     if (num > 0 && num < 10) {
//         return true;
//     } else {
//         return false;
//     }
// }

// function isNumberInRange(num) {
//     return num > 0 && num < 10;
// }

//=============================== task 05 =======================
// Сделайте функцию isEven() (even - это четный), которая параметром принимает целое число и проверяет: 
//четное оно или нет. Если четное - пусть функция возвращает true, если нечетное - false.
// function isEven(num) {
//     if (num % 2 == 0) {
//         return true;
//     } else {
//         return false;
//     }
// }

// function isEven(num) {
//     return num % 2 == 0;
// }
//=============================== task 06 =======================
// Дан массив с целыми числами. Создайте из него новый массив, где останутся лежать только четные из этих чисел. 
// Для этого используйте вспомогательную функцию isEven из предыдущей задачи
// const mass = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
// let result = [];
// for (let i = 0; i < mass.length; i++) {
//     if(isEven(mass[i])) {
//         result.push(mass[i]);
//     }
// }
// console.log(result); // [2, 4, 6, 8]

//=============================== task 07 =======================
// Дана строка. Сделайте заглавным первый символ каждого слова этой строки. 
//Для этого сделайте вспомогательную функцию ucfirst, которая будет получать строку, 
//делать первый символ этой строки заглавным и возвращать обратно строку с заглавной первой буквой

// var str ='abcde abcde abcde';
// var newArr = [];

// let arr = str.split('');
// for (let i = 0; i < arr.length; i++) {
//     newArr.push(uсFirst(arr[i]));
// }
// console.log(newArr);

//=============================== task 08 =======================
// Сделайте функцию inArray, которая определяет, есть в массиве элемент с заданным текстом или нет. 
//Функция первым параметром должна принимать текст элемента, а вторым - массив, в котором делается поиск. 
//Функция должна возвращать true или false
// var str = 'яблоко';
// var arr = ['банан', 'яблоко', 'персик'];
// console.log(inArray(str, arr));

// function inArray(str, arr) {
//     for (var i = 0; i < arr.length; i++) {    
//         if (arr[i] === str) {
//             return true;
//         }
//     }
//     return false;
// }
//=============================== task 09 =======================
// Сделайте функцию getDivisors, которая параметром принимает число и возвращает массив его делителей 
//(чисел, на которое делится данное число)
// function getDivisors(num) {
//     let mass = [];
//     for (var i = 1; i <= num; i++) {
//         if(num % i == 0) {
//             mass.push(i);
//         }
//     }
//     return mass;
// }
// console.log(getDivisors(36));
//=============================== task 10 =======================(1)
/*Напиши функцию checkNumberType(num)
  Функция получает число num как аргумент и возвращает 
  строку "Even" если число четное и строку "Odd" если не четное.
*/
function checkNumberType(num){
    let num = 0;
    for (var i = 1; i <= num; i ++){
        if(num % i == 0){
            
        }
    }
}
// // Вызовы функции для проверки
// console.log( checkNumberType(2) ); // 'Even'

// console.log( checkNumberType(46) ); // 'Even'

// console.log( checkNumberType(3) ); // 'Odd'

// console.log( checkNumberType(17) ); // 'Odd'


// //=============================== task 11 =======================(2)

// /*
//   Напиши функцию formatString(str)
  
//   - Функия принимает на вход строку str
//   - Если длина строки не превышает 40 символов, функция возвращает ее. 
//   - Если длина больше 40 символов, то функция обрезает строку до 40-ка
//     символов и добавляет в конец строки троеточие '...', после чего 
//     возвращает укороченную версию.
// */

// // Вызовы функции для проверки
// console.log(
//     formatString("Curabitur ligula sapien, tincidunt non.")
//   ); // вернется оригинальная строка
  
//   console.log(
//     formatString("Vestibulum facilisis, purus nec pulvinar iaculis.")
//   ); // вернется форматированная строка
  
//   console.log(
//     formatString("Curabitur ligula sapien.")
//   ); // вернется оригинальная строка
  
//   console.log(
//     formatString("Nunc sed turpis. Curabitur a felis in nunc fringilla tristique.")
//   ); // вернется форматированная строка
  

// //=============================== task 12 =======================(3)
// /*
//   Напиши функцию checkForSpam(str)
  
//   Функция принимает 1 параметр str - строку,
//   и проверять ее на содержание слов: spam и sale
  
//   Если нашли зарещенное слово то функция возвращает true,
//   если запрещенных слов нет функция возвращает false
  
//   PS: слова могут быть в произвольном регистре
// */

// // Вызовы функции для проверки
// console.log( checkForSpam('Latest technology news') ); // false

// console.log( checkForSpam('JavaScript weekly newsletter') ); // false

// console.log( checkForSpam('Get best sale offers now!') ); // true

// console.log( checkForSpam('[SPAM] How to earn fast money?') ); // true



// //=============================== task 13 =======================(4)

// /*  
//   Написать функцию, getPx(str) 
//   Функция getPx должна получать строку вида '10px',
//   проверять была ли передана строка, если да, 
//   возвращать только числовую составляющую, к примеру 10.
    
//   Если была передана не строка, функция возвращает null.
// */

// // Вызовы функции для проверки
// console.log( getPx("10px") === 10 ); // true
// console.log( getPx("10.5") === 10.5 ); // true
// console.log( getPx("0") === 0 ); // true
// console.log( getPx(-1) ); // null
// console.log( getPx(10) ); // null


// //=============================== task 14 =======================(5)

// /*  
//   Напиши фукнцию findLongestWord(str), которая принимает 
//   параметром произвольную строку и возвращает самое длинное слово в этой строке.   
  
//   Важное условие - в строке могут быть только пробелы, символы букв и цифр!
// */


// // Вызовы функции для проверки
// console.log(
//     findLongestWord("The quick brown fox jumped over the lazy dog")
//   ); // 'jumped'
  
//   console.log(
//     findLongestWord("Google do a roll")
//   ); // 'Google'
  
//   console.log(
//     findLongestWord("May the force be with you")
//   ); // 'force'
    

// //=============================== task 15 =======================(6)


// /*  
//   Напиши функцию findLargestNumber(numbers), 
//   которая получает массив чисел numbers, и возвращает 
//   самое большое число в массиве.
// */

// // Вызовы функции для проверки
// console.log(
//     findLargestNumber([1, 2, 3])
//   ); // 3
  
//   console.log(
//     findLargestNumber([27, 12, 18, 5])
//   ); // 27
  
//   console.log(
//     findLargestNumber([31, 128, 14, 74])
//   ); // 128
  

// //=============================== task 16 =======================(7)

// /*  
//   Есть массив уникальных чисел uniqueNumbers.
  
//   Написать функцию, addUniqueNumbers(...), 
//   которая получает произвольное кол-во чисел как аргументы, 
//   и добавляет в массив uniqueNumbers только уникальные,
//   а те которые в массиве уже есть игнорирует.
// */

// const uniqueNumbers  = [2, 1, 4, 9];

// // Вызовы функции для проверки
// addUniqueNumbers(1, 2, 3);
// console.log(
//   uniqueNumbers
// ); // [2, 1, 4, 9, 3]

// addUniqueNumbers(12, 2, 3, 19);
// console.log(
//   uniqueNumbers
// ); // [2, 1, 4, 9, 3, 12, 19]

// addUniqueNumbers(4, 5, 12, 3, 1, 2, 8);
// console.log(
//   uniqueNumbers
// ); // [2, 1, 4, 9, 3, 12, 19, 5, 8]

// //=============================== task 17 =======================(8)

// /*
//   Напиши функцию filterFromArray(arr), которая 
//   объявляет 1 параметр, исходный массив arr.
  
//   При вызове функции, первым аргументом всегда будет массив чисел,
//   за которым следуют один или несколько аргументов, тоже чисел. 
  
//   Функция возвращает новый массив, который содержит только 
//   те элементы исходного массива, которые не совпадают 
//   ни с одним из числовых аргументов.
// */

// const filterFromArray = function(arr) {
  
// }; 

// // Вызовы функции для проверки
// console.log(
//   filterFromArray([1, 2, 3, 4, 5], 2, 4)
// ); // [1, 3, 5]

// console.log(
//   filterFromArray([12, 4, 3, 8, 17], 3, 29, 18, 4)
// ); // [12, 8, 17]



// //=============================== ***** task **** 18  =======================


// /*
//   Есть массив logins с логинами пользователей. Напишите скрипт добавления логина в массив logins.
  
//   Добавляемый логин должен:
//     - проходить проверку на длину от 4 до 16-ти символов включительно
//     - быть уникален, то есть отсутствовать в массиве logins
 
//   🔔 Разбейте задачу на подзадачи с помощью функций.
  
//   Напишите функцию isLoginValid(login), в которой проверьте количество символов 
//   параметра login и верните true или false в зависимости от того, попадает ли длина параметра 
//   в заданный диапазон от 4-х до 16-ти символов включительно.
 
//   Создайте функцию isLoginUnique(allLogins, login), которая принимает логин и список 
//   всех логинов как параметры и проверяет наличие login в массиве allLogins, возвращая true 
//   если такого логина еще нет и false если логин уже используется.
//   Далее напишите функцию addLogin(allLogins, login) которая:
//     - Принимает новый логин и массив всех логинов как параметры
//     - Проверяет валидность логина используя вспомогательную функцию isLoginValid
//     - Если логин не валиден, прекратить исполнение функции addLogin 
//       и вернуть строку 'Ошибка! Логин должен быть от 4 до 16 символов'
//     - Если логин валиден, функция addLogin проверяеть уникальность логина 
//       с помощью функции isLoginUnique
//     - Если isLoginUnique вернет true, addLogin добавляет новый логин 
//        в logins и возвращает строку 'Логин успешно добавлен!'
//     - Если isLoginUnique вернет false, тогда addLogin не добавляет 
//        логин в массив и возвращает строку 'Такой логин уже используется!'
       
//   🔔 Принцип единственной ответственности функции - каждая функция делает что-то одно. Это 
//      позволяет переиспользовать код и изменять логику работы функции только в одном месте, 
//      не затрагивая работу программы в целом. Предикатные функции возвращают только true или 
//      false. Такие функции принято называть начиная с is: isLoginUnique и isLoginValid в нашем случае.
//       - isLoginUnique только проверяет есть ли такой логин в массиве и возвращает true или false. 
//       - isLoginValid только проверяет валидный ли логин и возвращает true или false.
//       - addLogin добавляет или не добавляет логин в массив. При этом для проверок условия добавления 
//         используются результаты вызовов других функций - isLoginUnique и isLoginValid.
// */

// const logins = ["Mango", "robotGoogles", "Poly", "Aj4x1sBozz", "qwerty123"];

// const isLoginValid = function(login) {
//   // код
// };

// const isLoginUnique = function(allLogins, login) {
//   // код
// };

// const addLogin = function(allLogins, login) {
//   // код
// };

// // Вызовы функции для проверки
// addLogin(logins, 'Ajax'); // 'Логин успешно добавлен!'
// addLogin(logins, 'robotGoogles'); // 'Такой логин уже используется!'
// addLogin(logins, 'Zod'); // 'Ошибка! Логин должен быть от 4 до 16 символов'
// addLogin(logins, 'jqueryisextremelyfast'); // 'Ошибка! Логин должен быть от 4 до 16 символов'

//PART 2
// 1 с предусловием - выполняется пока истинно условие, указанное перед началом цикла

// Сделаем простой счетчик
// let counter = 0;
// while(counter < 10) {
//     console.log("counter:", counter);
//     counter += 1;
// }

// Будем заполнять места в отеле до тех пор пока
// текущее количество клиентов не будет равно максимально допустимому
// let clientCounter = 18;
// const maxClients = 25;
// while(clientCounter < maxClients) {
//   console.log(clientCounter);
//   clientCounter += 1;
// }

// Переберем массив клиентов и выведем их имена
// const clients = ["Mango", "Ajax", "Poly"];
// let i = 0;
// while (i < clients.length) {
//   console.log('Logging clients: ', clients[i]);
//   i += 1;
// }

// 2 с постусловием - условие проверяется после выполнения цикла
// let input = 0;

// do {
//   input = Number( prompt('Введите число больше 10', '') );
// } while(input <= 10);

// 3 со счетчиком - переменная изменяется с заданным шагом и цикл выполняется для каждого шага
// Итераторы по традиции называются буквами i/j/k
// const number = 10;

// for(let i = 0; i < number; i += 1) {
//   console.log(i);
// }

// Вспомним про операцию a % b и выведем остаток
// от деления используя цикл
// for(let i = 0, max = 10; i < max; i += 1) {
//     console.log(`${max} % ${i} = `, max % i);
//   }

//=============================================
// const clients = ['Mango', 'Ajax', 'Poly'];

// for(let i = 0, max = clients.length; i < max; i += 1) {
//   console.log(clients[i]);
// }

//=============================================
// const numbers = [];

// for(let i = 0; i < 10; i += 1) {
//   numbers.push(`number-${i}`);
// }

// console.log(numbers);

// 4 бесконечный - безусловный цикл, проверка условия отсутствует или заменяется константным значением
// Итерация по массиву
// const clients = ['Mango', 'Ajax', 'Poly'];

// for(const value of clients) {
//   console.log(value);
// }

// // Итерация по строке
// const iterable = 'javascript';

// for (const value of iterable) {
//   console.log(value);
// }

// break
// const clients = ["Mango", "Poly", "Ajax"];
// const clientName = "Poly";
// let resultMsg = "";
// for (const value of clients) {
//   // На каждой итерации мы будем проверять совпадает ли элемент массива с именем клиента.
//   // Если совпадает то мы записываем в resultMsg сообщение об успехе и делаем break чтобы не искать дальше
//   if (value === clientName) {
//     resultMsg = "Клиент с таким именем есть в базе данных!";
//     break;
//   }
//    // Если они не совпадают то запишем в resultMsg сообщeние об отсутсвии имени
//   resultMsg = "Клиента с таким именем нет в базе данных!";
// }
// console.log(resultMsg); // Клиент с таким именем есть в базе данных!

// const clients = ["Mango", "Poly", "Ajax"];
// const clientName = "Poly";
// let resultMsg = "Клиента с таким именем нет в базе данных!";

// for (const value of clients) {
//   // На каждой итерации мы будем проверять совпадает ли элемент массива с именем клиента.
//   // Если совпадает, то мы записываем в resultMsg сообщение об успехе и делаем break чтобы не искать дальше
//     if (value === clientName) {
//       resultMsg = "Клиент с таким именем есть в базе данных!";
//       break;
//     }// Если не совпадает то ничего не делаем
// }
// console.log(resultMsg); // Клиент с таким именем есть в базе данных!

// continue
// Используем цикл для вывода только нечетных чисел!
// Для чётных i срабатывает continue, выполнение тела
// прекращается и управление передаётся на следующую итерацию.

// const number = 10;

// for (let i = 0; i < number; i += 1) {
//   if (i % 2 === 0) continue;

//   console.log("Нечетное i: ", i); // 1, 3, 5, 7, 9
// }

// //================ task 1 ===============
// /*
//  * Есть массив имен пользователей
//  * Используя методы массива, последовательно выполнить указанные операции
//  */
// const users = ["Mango", "Poly", "Ajax", "Chelsey"];
// // // Удалить первый элемент массива
// users.splice(0, 1);
// console.log(users); // ["Poly", "Ajax", "Chelsey"]
// // // Удалить последний элемент массива
// users.pop();
// console.log(users); // ["Poly", "Ajax"]
// // // Добавить в начало массива пользователя "Lux"
// users.unshift('Lux');
// console.log(users); // ["Lux", "Poly", "Ajax"]
// // // Добавить в конец массива два пользователя ("Jay" и "Kiwi") за одну операцию
// users.push('Jay', 'Kiwi');
// console.log(users); //  ["Lux", "Poly", "Ajax", "Jay", "Kiwi"]
// // // Удалить из массива элемент хранящийся в переменной userToDelete
// const userToDelete = "Ajax";
// users.splice(2, 1);
// console.log(users); //  ["Lux", "Poly", "Jay", "Kiwi"]
// // // Добавить в массив пользователя "Kong", перед пользователем хранящейся в переменной userToInsertBefore
// const userToInsertBefore = "Jay";
// users.splice(2, 0, 'Kong');
// console.log(users); //  ["Lux", "Poly", "Kong", "Jay", "Kiwi"]

// //=============================task 2=======
// //Задание 1 Вывести числа от 4 до 400 на экран.
// let number = 4;
// while(number < 401) {
// console.log("number:", number);
// number += 1;
// }
// //=============================task 3 ===============
// //Задание 2 Вывести числа в последовательности: 4 7 10 13 с помощью цикла.
// let number = 4;
// while(number < 401) {
// console.log("number:", number);
// number += 3;
// }
// //=============================task 4 ===============
// //Задание 3 Вывести числа 654 653 652 до нуля.
// let number = 654;
// while(number > 0) {
// console.log("number:", number);
// number -= 1;
// }
// //=============================task 5 ===============
// //Задание 4 Вывести все годы с 1983 до 2017.
// let number = 1983;
// while(number < 2018) {
// console.log("number:", number);
// number += 1;
// }
// //============================== task 6 ===============
// //Задание 8 Дано число n=1000. Делите его на 2 столько раз, пока результат деления не станет меньше 50. 
//Какое число получится? 
//Посчитайте количество итераций, необходимых для этого (итерация - это проход цикла), 
//и запишите его в переменную num
// var n = 1000;
// var num = 0;
// while (n > 50) {
// 	num = num+1;
// 	n /= 2;
// }
// console.log(n);
// console.log(num);

// for(var i = 1000, num = 0;
//     i > 50; 
//     i /= 2, num = num + 1) {
//   }
//   console.log(i);
//   console.log(num);
// //============================== task 7 =================================
// // Дан массив с элементами 2, 5, 9, 15, 0, 4. 
// С помощью цикла for и оператора if выведите на экран столбец тех элементов массива, 
// которые больше 3-х, но меньше 10.
// var mass = [ 2, 5, 9, 15, 0, 4 ];
// for (var i = 0; i < mass.length; i = i + 1 ) {
//     if (mass[i] > 3 && mass[i] < 10) {
//         console.log(mass[i]);
//     }
// }

// //==============================task 8 =================================
// // Дан массив с числами. Числа могут быть положительными и отрицательными. 
// Найдите сумму положительных элементов массива.
// var sum = 0;
// var mass = [ -2, -5, -9, 15, 0, 4 ];
// for (var i = 0; i < mass.length; i = i + 1) {
//     if (mass[i] >= 0) {
//         sum += mass[i];
//     }
// }
// console.log(sum);

// //=========================== tasks 9 =======================
// // Дан массив с элементами 1, 2, 5, 9, 4, 13, 4, 10. 
// С помощью цикла for и оператора if проверьте есть ли в массиве элемент со значением, равным 4. 
// Если есть - выведите на экран 'Есть!' и выйдите из цикла. Если нет - ничего делать не надо.
// var mass = [1, 2, 5, 9, 4, 13, 4, 10];
// for (var i = 0; i < mass.length; i = i + 1) {
//     if (mass[i] == 4) {
//         console.log('Yes');
//         break;
//     }
// }

// //============================ task 10 =====================
// // Дан массив числами, например: ['10', '20', '30', '50', '235', '3000']. 
//Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5. 
// var mass = ['10', '20', '30', '50', '235', '3000'];
// for (var i = 0; i < mass.length; i = i +1 ) {
//     if (mass[i][0] == '1' || mass[i][0] == '5') {
//         console.log(mass[i]); // 10; 50
//     }
// }

// //=========================== task 11 =========================
// * Есть массив имен пользователей users
// * Напиши цикл, который для каждого пользователя будет выводить в консоль
// * сообщение в формате [номер элемента] - [значение элемента]. 
// * Нумерация должна начинаться с 1. К примеру для первого элемента массива
// * с индексом 0 будет выведено '1 - Mango', а для индекса 2 выведет '3 - Ajax'
// * Цикл должен выводить сообщения до тех пор, пока не закончатся элементы массива

// const users = ["Mango", "Poly", "Ajax", "Lux", "Jay", "Kong"];
// for (var i = 0; i < users.length; i = i + 1) {
//     if (users[0] = '1 - Mango',
//         users[1] = '2 - Poly',
//         users[2] = '3 - Ajax',
//         users[3] = '4 - Lux',
//         users[4] = '5 - Jay',
//         users[5] = '6 - Kong') {
//             console.log(users);
//             break;
//         }
//     }
//==================== верно
// const users = ["Mango", "Poly", "Ajax", "Lux", "Jay", "Kong"];
// for (let i of users) {
// const x = users.indexOf(i) + 1;
// console.log(x + " - " + i);
// }

// //========================== task 12 =========================
// /*
// * Напиши скрипт по автоматизации оплаты процесса гравировки украшений.
// * Гравировка одного слова стоит 10 кредитов.
// */

// // В переменной message хранится произвольная строка
// const message = "Proin sociis natoque et magnis parturient montes mus";
// let price = 0;

// // Разбить строку в массив, разделитель - пробел, и записать в переменную words
// console.log(words);

// // Выведи в консоли длину массива words
// console.log(); // 8

// // Используя цикл вычисли сколько будет стоить гравировка и запиши результат в переменную price
// console.log(price); // 80


// //============================= task 13 ============================

// /*
//   Напиши цикл, который просит, через prompt, ввести число больше 100. 
  
//   Если посетитель нажал Cancel - завершить цикл.
  
//   Если посетитель ввёл другое число – попросить ввести ещё раз, 
//   и так далее, пока не введет число больше 100.
  
//   Предполагается, что посетитель вводит только числа, 
//   обрабатывать невалидный ввод вроде строк 'qwerty' не нужно.
  
//   PS: используй бесконечный цикл с прерыванием
// */


// //============================= task 14 ===============================


//  /*
//   Напиши скрипт, который выбирает из массива numbers 
//   все числа, которые больше чем значение переменной num, 
//   записывая эти числа в массив matched.
      
//   В результате в массиве matched будут все подходяшие числа.
      
//   PS: используй цикл for или for...of и оператор ветвления if
// */

// const numbers = [1, 3, 17, 5, 9, 14, 8, 14, 34, 18, 26];
// const num = 10;
// const matched = [];

// console.log(matched); // [17, 14, 14, 32, 18, 26]


// //==================== task 15 ===============================================

// /*
//   Напиши скрипт, который проверяет произвольную строку 
//   в переменной message и находит в ней самое длинное слово,
//   записывая его в переменную longestWord.
// */

// const message = "May the force be with you";
// let longestWord;

// console.log(longestWord); // 'force'


// //================== task 16 ===============================================


// /*
//   Создай игру угадай число.
  
//   Есть массив чисел numbers, содержащий "верные" числа.
//   Числа в массиве всегда идут по возрастанию, 1-5, 20-40, 2-100 и т.п.
  
//   Просим пользователя ввести цифру от самого маленького,
//   до самого большого элемента массива. Эти значения необходимо
//   сохранить в переменные min и max. Учтите что массив произвольный,
//   но элементы всегда идут по возрастанию.
  
//   Пусть prompt говорит "Введите цифру между x и y", где x и y 
//   соотвественно самый маленький и самый большой элемент массива.
  
//   Предполагаем что пользователь вводит только числа, проверки на невалидный ввод не делать. 
//   Проверить содержит ли в себе массив numbers введенное число.
  
//     - Если содержит - выводим alert с сообщением 'Поздравляем, Вы угадали!'.
//     - Есл не содержит - выводим alert с сообщением 'Сожалеем, Вы не угадали!'.
// */

// const numbers = [12, 15, 25, 37, 41, 62, 74, 83];


// //============================= task 17 ===================================

// /*
//   Напиши скрипт который:
  
//   - Запрашивает по очереди числа при помощи prompt и сохраняет их в массиве.
//     Используйте do...while.
//   - Проверять что пользователь ввел не число не обязательно
//   - Заканчивает запрашивать числа как только пользователь нажмёт Cancel.
//   - После того как ввод был завершен, если массив не пустой, 
//     скрипт выводит сумму всех значений массива: "Сумма: <сумма всех значений в массиве>"
//     Используйте цикл for...of
// */


// //============================= ***ЗАДАНИЕ ПОВЫШЕННОЙ СЛОЖНОСТИ*** =============================

// /*
  
  
//   Создайте игру угадай число.
  
//   Есть массив чисел numbers, содержащий "верные" числа.
//   Числа в массиве всегда идут по возрастанию, 1-5, 20-40, 2-100 и т.п.
  
//   Просим пользователя ввести цифру от самого маленького,
//   до самого большого элемента массива. Эти значения необходимо
//   сохранить в переменные min и max. Учтите что массив произвольный,
//   но элементы всегда идут по возрастанию.
  
//   Пусть prompt говорит "Введите цифру между x и y", где x и y 
//   соотвественно самый маленький и самый большой элемент массива.
  
//   Но пользователь может ввести что угодно, необходимо проверить 
//   что было введено. Преобразовать input в числовой тип и проверить 
//   число ли это.
  
//     - Если не число - выводим alert с сообщением о том, что было 
//       введено не число.
//     - Если число - проверить содержит ли в себе массив numbers это число.
//     - Если содержит - выводим alert с сообщением 'Поздравляем, Вы угадали!'.
//     - Есл не содержит - выводим alert с сообщением 'Сожалеем, Вы не угадали!'.
// */

// const numbers = [12, 15, 25, 37, 41];


// //========================== ***ЗАДАНИЕ ПОВЫШЕННОЙ СЛОЖНОСТИ*** =====================

// /*
//   Написать следующий скрипт:
  
//     - При загрузке страницы пользователю предлагается ввести через prompt число. 
//       Число введенное пользователем записывается в массив чисел.
      
//     - Операция ввода числа пользователем и сохранение в массив продолжается до
//       тех пор, пока пользователь не нажмет Cancel в prompt. Используйте цикл do...while.
      
//     - После того как пользователь прекратил ввод нажав Cancel, необходимо взять 
//       массив введенных чисел, сложить общую сумму всех элементов массива и 
//       записать ее в переменную. Используйте цикл for или for...of.
      
//     - По окончанию ввода, если массив не пустой, вывести alert с текстом `Общая сумма чисел равна ${сумма}`
      
//   🔔 PS: Делать проверку того, что пользователь ввел именно число, а не произвольный набор 
//       символов, не обязательно. Если хотите, в случае некорректного ввода покажите alert с текстом 
//       'Было введено не число, попробуйте еще раз', при этом результат prompt записывать 
//       в массив чисел не нужно, после чего снова пользователю предлагается ввести число в prompt.
// */

// let userInput;
// const numbers = [];
// let total = 0;


// //========================== ***ЗАДАНИЕ ПОВЫШЕННОЙ СЛОЖНОСТИ*** =====================

// /*
  
//   Напишите скрипт имитирующий авторизацию пользователя.
  
//   Есть массив паролей зарегистрированных пользователей passwords. 
  
//   При посещении страницы, необходимо попросить пользователя ввести свой пароль,
//   после чего проверить содержит ли массив passwords пароль введенный пользователем.
  
//   Пароль можно ввести не верно всего n раз, кол-во хранится в переменной attempts.
//   Подсказка: используйте цикл do...while.
//   Если был введен пароль который есть в массиве passwords, вывести alert 
//   с текстом 'Добро пожаловать!' и прекратить спрашивать пароль в цикле.
//   Если был введен не существующий пароль, отнять от лимита попыток единицу, 
//   вывести alert с текстом "Неверный пароль, у вас осталось n попыток", 
//   где n это оставшийся лимит. 
  
//   После того как пользователь закрыл alert, запросить пароль снова. 
//   Продолжать запрашивать пароль до тех пор, пока пользователь не введет 
//   существующий пароль, не кончатся попытки или пока пользователь 
//   не нажмет Cancel в prompt.
//   Если закончились попытки, вывести alert с текстом "У вас закончились попытки, аккаунт заблокирован!"
  
//   Если пользователь нажмет Cancel, прекратить выполнение цикла.
// */

// const passwords = ['qwerty', '111qwe', '123123', 'r4nd0mp4zzw0rd'];
// let attempts = 3;